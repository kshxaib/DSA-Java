// Problem: Print all indices of an element in an array
/*
ðŸ“Œ Problem Statement:
Given an array and a key, print all indices where the key occurs.

ðŸ‘‰ Approach:
- Traverse array recursively.
- At each step:
   - If current element matches key â†’ print index.
   - Move to next index (index+1).
*/

public class Question1 {
    
    // Recursive function to print indices of 'key'
    public static void printIndices(int arr[], int key, int index){
        // Base case: if we reach end of array â†’ stop
        if(index == arr.length){
            return;
        }

        // If current element matches the key â†’ print its index
        if(arr[index] == key){
            System.out.print(index + " ");
        }

        // Recursive call for next element
        printIndices(arr, key, index+1);
    }

    public static void main(String[] args) {
        int arr[] = {3, 2, 4, 5, 6, 2, 7, 2, 2};
        printIndices(arr, 2, 0);  
        // Expected Output â†’ 1 5 7 8
    }    
}

/*
ðŸ“Œ Dry Run:
arr = {3, 2, 4, 5, 6, 2, 7, 2, 2}, key=2

Step 1: index=0 â†’ arr[0]=3 â‰  key â†’ skip
Step 2: index=1 â†’ arr[1]=2 = key â†’ print 1
Step 3: index=2 â†’ arr[2]=4 â‰  key â†’ skip
Step 4: index=3 â†’ arr[3]=5 â‰  key â†’ skip
Step 5: index=4 â†’ arr[4]=6 â‰  key â†’ skip
Step 6: index=5 â†’ arr[5]=2 = key â†’ print 5
Step 7: index=6 â†’ arr[6]=7 â‰  key â†’ skip
Step 8: index=7 â†’ arr[7]=2 = key â†’ print 7
Step 9: index=8 â†’ arr[8]=2 = key â†’ print 8
â†’ End

âœ… Output = 1 5 7 8

âœ… Time Complexity: O(n) â†’ each element is visited once
âœ… Space Complexity: O(n) â†’ recursion stack depth = n
*/
