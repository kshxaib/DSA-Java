// Problem: Print all permutations of a string using recursion
/*
ðŸ“Œ Problem Statement:
Given a string, generate and print all possible permutations
of its characters.

ðŸ‘‰ Idea:
- At each step, pick one character as the current choice.
- Remove that character from the remaining string.
- Recursively generate permutations of the reduced string.
- Append chosen character to the answer string.
*/

public class Permutations {

    // Recursive function to print all permutations
    public static void printPermutations(String str, String ans){
        // Base case: if string becomes empty â†’ one permutation complete
        if(str.length() == 0){
            System.out.println(ans);
            return;
        }

        // Loop over each character in the string
        for(int i=0; i<str.length(); i++){
            // Pick the current character
            char currentChar = str.charAt(i);

            // Form the remaining string by removing current character
            String newStr = str.substring(0, i) + str.substring(i+1, str.length());

            // Recursive call â†’ build permutation with currentChar added to ans
            printPermutations(newStr, ans + currentChar);
        }
    }

    public static void main(String[] args) {
        String str = "abc";
        String ans = "";   // initially empty answer
        printPermutations(str, ans); // start recursion
    }
}

/*
ðŸ“Œ Dry Run (str = "abc"):

1. Pick 'a' â†’ newStr = "bc"
   â†’ Pick 'b' â†’ newStr="c" â†’ ans="ab" â†’ then "abc"
   â†’ Pick 'c' â†’ newStr="b" â†’ ans="ac" â†’ then "acb"

2. Pick 'b' â†’ newStr = "ac"
   â†’ Pick 'a' â†’ newStr="c" â†’ ans="ba" â†’ then "bac"
   â†’ Pick 'c' â†’ newStr="a" â†’ ans="bc" â†’ then "bca"

3. Pick 'c' â†’ newStr = "ab"
   â†’ Pick 'a' â†’ newStr="b" â†’ ans="ca" â†’ then "cab"
   â†’ Pick 'b' â†’ newStr="a" â†’ ans="cb" â†’ then "cba"

âœ… Output:
abc
acb
bac
bca
cab
cba

---
ðŸ“Š Time Complexity:
- n! permutations for string of length n.
- Each permutation takes O(n) to construct.
- Total = O(n Ã— n!).

ðŸ“Š Space Complexity:
- O(n) recursion depth.
- O(n) space for temporary strings.
*/
