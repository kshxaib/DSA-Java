// Problem: Count number of ways to reach bottom-right corner of a grid
/*
ðŸ“Œ Problem Statement:
We are given an nÃ—m grid. Starting from the top-left cell (0,0), 
you can only move:
   - Down (i+1, j)
   - Right (i, j+1)
Find the total number of unique paths to reach the bottom-right cell (n-1, m-1).

ðŸ‘‰ Idea (Recursion):
- If we reach the destination â†’ count 1 way.
- If we go out of bounds â†’ count 0 ways.
- Otherwise â†’ total ways = ways moving down + ways moving right.
*/

public class GridWays {

    // Recursive function to count paths
    public static int gridWays(int i, int j, int n, int m){
        // âœ… Base case 1: Reached bottom-right cell
        if(i == n-1 && j == m-1){
            return 1;
        }

        // âœ… Base case 2: Out of grid boundaries
        if(i == n || j == m){
            return 0;
        }

        // ðŸ”¹ Move down (i+1, j)
        int w1 = gridWays(i+1, j, n, m);

        // ðŸ”¹ Move right (i, j+1)
        int w2 = gridWays(i, j+1, n, m);

        // Total paths from current cell = down + right
        return w1 + w2;
    }

    public static void main(String[] args) {
        int n = 3, m = 3; // 3x3 grid
        System.out.println(gridWays(0, 0, n, m));
        // Expected output: 6 (paths in a 3x3 grid)
    }
}

/*
ðŸ“Œ Dry Run (n=3, m=3):

Start (0,0):
 â†’ Down â†’ (1,0) â†’ (2,0) â†’ (2,1) â†’ (2,2) âœ…
 â†’ Down â†’ (1,0) â†’ (1,1) â†’ (1,2) â†’ (2,2) âœ…
 â†’ ...
 â†’ Right â†’ (0,1) â†’ (0,2) â†’ (1,2) â†’ (2,2) âœ…
 â†’ ...

Total = 6 unique paths.

---
ðŸ“Š Time Complexity:
- O(2^(n+m)) â†’ exponential, since each cell branches into 2 recursive calls.

ðŸ“Š Space Complexity:
- O(n+m) â†’ recursion stack depth.
*/
