Linked Lists - Revision Notes (Java)

📘 Definition:
A Linked List is a **linear data structure** where elements (called **nodes**) are connected 
using **pointers**.
Each node stores:
1. Data → the actual value (e.g., int, string, object)
2. Next → reference (address) to the next node

Unlike arrays, linked lists are not stored in contiguous memory locations.

📦 Types of Linked Lists:
1. Singly Linked List → each node points to next node only
2. Doubly Linked List → each node points to both next and previous nodes
3. Circular Linked List → last node points back to the head

🧠 Advantages:
- Dynamic size (no fixed length like arrays)
- Efficient insertions and deletions (no shifting elements)

⚠️ Disadvantages:
- Random access not possible (must traverse from head)
- Extra memory for storing pointer references

📌 Node Structure in Java:
class Node {
    int data;        // value of the node
    Node next;       // reference to the next node

    Node(int data) {
        this.data = data;
        this.next = null;
    }
}

📌 Creating a Linked List in Java:
public class LinkedListExample {
    Node head; // starting point of list

    // Add node at the end
    public void addNode(int data) {
        Node newNode = new Node(data);
        if (head == null) {
            head = newNode;
            return;
        }
        Node temp = head;
        while (temp.next != null) {
            temp = temp.next;
        }
        temp.next = newNode;
    }

    // Print the linked list
    public void printList() {
        Node temp = head;
        while (temp != null) {
            System.out.print(temp.data + " -> ");
            temp = temp.next;
        }
        System.out.println("null");
    }

    public static void main(String[] args) {
        LinkedListExample list = new LinkedListExample();
        list.addNode(10);
        list.addNode(20);
        list.addNode(30);
        list.printList();  // Output: 10 -> 20 -> 30 -> null
    }
}

📊 Time Complexities:
- Insertion at beginning: O(1)
- Insertion at end: O(n)
- Deletion: O(n)
- Traversal: O(n)

✅ Summary:
Linked List = sequence of nodes connected by references.
Useful when frequent insertions/deletions are needed.
