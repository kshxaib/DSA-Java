// printFactorial.java
// Topic: Recursion - Factorial of a number

public class printFactorial {

    // Recursive function to find factorial of n
    public static int findFac(int n) {
        // Base Case â†’ factorial(1) = 1
        if (n == 1) {
            return 1;
        }

        // Recursive Case â†’ n! = n * (n-1)!
        return n * findFac(n - 1);
    }

    public static void main(String[] args) {
        // Example â†’ factorial of 5
        System.out.print(findFac(5));
    }
}

/*
ðŸ“Œ Dry Run for n = 5:
findFac(5) 
= 5 * findFac(4)
= 5 * (4 * findFac(3))
= 5 * (4 * (3 * findFac(2)))
= 5 * (4 * (3 * (2 * findFac(1))))
= 5 * 4 * 3 * 2 * 1
= 120

Output: 120

------------------------------------------------
ðŸ“Œ Complexity Analysis:

1. Time Complexity: O(n)
   - Function is called n times until base case is reached.

2. Space Complexity: O(n)
   - Due to recursive call stack storing n frames.

------------------------------------------------
ðŸ“Œ Quick Revision Notes:
- Factorial (n!) = n Ã— (n-1) Ã— (n-2) Ã— ... Ã— 1
- Recursion:
   âœ… Base Case â†’ when n == 1, return 1
   âœ… Recursive Case â†’ n * factorial(n-1)
- Without base case â†’ infinite recursion â†’ StackOverflowError
*/
