// Topic: Recursion - Print numbers in decreasing order

public class PrintNumberInDecreasing {

    // Recursive method to print numbers in decreasing order
    public static void printNumber(int n) {
        // Base Case â†’ stopping condition
        if (n == 1) {
            System.out.println(n); // print 1 and stop recursion
            return;
        }

        // Work â†’ print current number
        System.out.println(n);

        // Recursive Call â†’ function calls itself with n-1
        printNumber(n - 1);
    }

    public static void main(String[] args) {
        // Function call â†’ prints numbers from 10 to 1
        printNumber(10);
    }
}

/*
ðŸ“Œ Dry Run for n = 3
printNumber(3) â†’ prints 3 â†’ calls printNumber(2)
printNumber(2) â†’ prints 2 â†’ calls printNumber(1)
printNumber(1) â†’ prints 1 â†’ returns

Output: 3 2 1

------------------------------------------------
ðŸ“Œ Complexity Analysis:

1. Time Complexity: O(n)
   - Each call prints one number
   - Total n calls â†’ O(n)

2. Space Complexity: O(n)
   - Due to function call stack
   - At maximum, n function calls will be stored

------------------------------------------------
ðŸ“Œ Quick Revision Notes:
- Recursion = method calling itself.
- Must include Base Case to stop recursion.
- Here base case: if(n == 1).
- Without base case â†’ infinite recursion â†’ StackOverflowError.
*/
