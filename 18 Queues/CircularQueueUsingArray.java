// âœ… Problem: Implement Circular Queue using Array
/*
ðŸ“Œ Problem Statement:
Implement a **Circular Queue** data structure using an array in Java.  
A Circular Queue overcomes the limitation of the Linear Queue where  
empty spaces at the front cannot be reused after dequeuing.

You need to perform the following operations:
1. **add()**   â†’ Enqueue (insert) an element at the rear.
2. **remove()** â†’ Dequeue (remove) an element from the front.
3. **peek()**   â†’ Get the front element without removing it.

ðŸ‘‰ Concept:
- Queue follows the **FIFO (First In, First Out)** principle.
- In a **Circular Queue**, the last position connects back to the first position.
- This allows efficient space utilization â€” all slots can be reused.
- Use **modulo (%)** to wrap indices when they reach the end of the array.

ðŸ”¹ Key Formulas:
- Queue is **Full** when â†’ `(rear + 1) % size == front`
- Queue is **Empty** when â†’ `rear == -1 && front == -1`
*/

public class CircularQueueUsingArray {

    // Inner static class for queue implementation
    static class Queue {
        static int arr[];   // Array to store queue elements
        static int size;    // Maximum size of queue
        static int rear;    // Index of last inserted element
        static int front;   // Index of first element

        // ðŸ”¹ Constructor to initialize the queue
        Queue(int n) {
            arr = new int[n];
            this.size = n;
            this.rear = -1;  // Initially empty
            this.front = -1; // Initially empty
        }

        // ðŸ”¹ Check if queue is empty
        public static boolean isEmpty() {
            return rear == -1 && front == -1;
        }

        // ðŸ”¹ Check if queue is full
        public static boolean isFull() {
            return (rear + 1) % size == front;
        }

        // ðŸ”¹ Add (enqueue) element at the rear of the queue
        public static void add(int data) {
            if (isFull()) {
                System.out.println("Queue is full."); // Overflow condition
                return;
            }

            // First element insertion
            if (front == -1) {
                front = 0;
            }

            // Move rear circularly
            rear = (rear + 1) % size;
            arr[rear] = data;
        }

        // ðŸ”¹ Remove (dequeue) element from the front of the queue
        public static int remove() {
            if (isEmpty()) {
                System.out.println("Queue is empty, cannot remove."); // Underflow condition
                return -1;
            }

            int frontValue = arr[front]; // Element to remove

            // If only one element is left
            if (rear == front) {
                rear = -1;
                front = -1;
            } else {
                // Move front circularly
                front = (front + 1) % size;
            }

            return frontValue;
        }

        // ðŸ”¹ Peek operation â€” returns front element without removing it
        public static int peek() {
            if (isEmpty()) {
                System.out.println("Queue is empty, cannot peek.");
                return -1;
            }

            return arr[front]; // Return current front element
        }
    }

    // ðŸ”¹ Main method â€” testing Circular Queue
    public static void main(String args[]) {
        Queue queue = new Queue(5); // Create a circular queue of size 5

        // Enqueue elements
        queue.add(1);
        queue.add(2);
        queue.add(3);
        queue.add(4);
        queue.add(5);

        // Display and remove elements in FIFO order
        while (!queue.isEmpty()) {
            System.out.println(queue.peek()); // Show front element
            queue.remove();                   // Remove front element
        }

        // Reuse queue to demonstrate circular behavior
        queue.add(10);
        queue.add(20);
        queue.add(30);

        System.out.println("After reusing queue:");
        while (!queue.isEmpty()) {
            System.out.println(queue.peek());
            queue.remove();
        }
    }
}

/*
ðŸ“Œ Dry Run:

Queue size = 5

Initial state â†’ front = -1, rear = -1

add(1) â†’ front = 0, rear = 0 â†’ [1]
add(2) â†’ rear = 1 â†’ [1, 2]
add(3) â†’ rear = 2 â†’ [1, 2, 3]
add(4) â†’ rear = 3 â†’ [1, 2, 3, 4]
add(5) â†’ rear = 4 â†’ [1, 2, 3, 4, 5]

Now remove:
â†’ peek() = 1 â†’ remove() â†’ front moves â†’ [2, 3, 4, 5]
â†’ peek() = 2 â†’ remove()
â†’ ...
â†’ queue becomes empty

Then reuse:
add(10), add(20), add(30)
(rear wraps around circularly using modulo)

âœ… Output:
1
2
3
4
5
After reusing queue:
10
20
30

---

ðŸ“Š Time Complexity:
- add()   â†’ O(1)
- remove() â†’ O(1)
- peek()   â†’ O(1)

ðŸ“Š Space Complexity:
O(n) â€” for the array.

âœ… Concept Used:
Circular Queue using Array + Modulo Arithmetic
*/
