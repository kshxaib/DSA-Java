import java.util.*;

// Problem: Implement Stack using ArrayList
/*
ðŸ“Œ Problem Statement:
We need to implement a Stack data structure using Java's ArrayList.
A stack follows the **LIFO (Last In, First Out)** principle:
   - The last element pushed is the first one to be popped.

ðŸ‘‰ Operations to implement:
1. push(x): Insert element on top of stack
2. pop(): Remove and return top element
3. peek(): Return top element without removing
4. isEmpty(): Check if stack is empty

âœ… We'll use ArrayList because it allows dynamic resizing and 
   provides O(1) access to the last element.
*/

public class StackUsingArrayList {

    // Inner static class representing Stack
    public static class Stack {
        // Using ArrayList to store stack elements
        static ArrayList<Integer> list = new ArrayList<>();

        // âœ… Check if stack is empty
        public static boolean isEmpty() {
            return list.size() == 0;
        }

        // âœ… Push operation â€“ add element to top (end of list)
        public static void push(int data) {
            list.add(data);
        }

        // âœ… Pop operation â€“ remove and return top element
        public static int pop() {
            if (isEmpty()) {              // Stack Underflow check
                System.out.println("Stack Underflow");
                return -1;
            }

            int top = list.get(list.size() - 1);  // get top element
            list.remove(list.size() - 1);         // remove top
            return top;
        }

        // âœ… Peek operation â€“ return top element without removing
        public static int peek() {
            if (isEmpty()) {              // Empty stack check
                System.out.println("Stack is Empty");
                return -1;
            }

            return list.get(list.size() - 1);     // return top element
        }
    }

    public static void main(String[] args) {
        Stack s = new Stack();

        // ðŸ”¹ Push elements onto stack
        s.push(1);
        s.push(2);
        s.push(3);
        s.push(4);
        s.push(5);

        // ðŸ”¹ Pop and print all elements (LIFO order)
        while (!s.isEmpty()) {
            System.out.println(s.peek()); // show top element
            s.pop();                      // remove top element
        }
    }
}

/*
ðŸ“Œ Dry Run:
Push sequence: [1, 2, 3, 4, 5]
Stack (top â†’ bottom): 5, 4, 3, 2, 1

Pop sequence:
â†’ Peek = 5 â†’ Pop 5
â†’ Peek = 4 â†’ Pop 4
â†’ Peek = 3 â†’ Pop 3
â†’ Peek = 2 â†’ Pop 2
â†’ Peek = 1 â†’ Pop 1

Output:
5
4
3
2
1

---

ðŸ“Š Time Complexity:
push()  â†’ O(1)
pop()   â†’ O(1)
peek()  â†’ O(1)
isEmpty() â†’ O(1)

ðŸ“Š Space Complexity:
O(n) â€” for storing n elements in the ArrayList
*/
