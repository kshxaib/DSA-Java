// Problem: Implement Stack using Linked List
/*
ðŸ“Œ Problem Statement:
We need to implement a Stack data structure using a **Linked List**.
Stack follows the **LIFO (Last In, First Out)** principle:
   - The last element pushed is the first one to be popped.

ðŸ‘‰ Operations to implement:
1. push(x): Insert element at the top
2. pop(): Remove and return the top element
3. peek(): Return top element without removing
4. isEmpty(): Check if stack is empty

âœ… We'll use a singly linked list where the **head** node represents 
   the **top** of the stack.
*/

public class StackUsingLinkedList {

    // ðŸ”¹ Node class represents a single element in the linked list
    static class Node {
        int data;
        Node next;

        public Node(int data) {
            this.data = data;
            this.next = null;
        }
    }

    // ðŸ”¹ Stack class implementing stack operations using linked list
    static class Stack {
        static Node head = null; // top of stack

        // âœ… Check if stack is empty
        public static boolean isEmpty() {
            return head == null;
        }

        // âœ… Push operation â€” insert element at top (head)
        public static void push(int data) {
            Node newNode = new Node(data); // create new node
            if (isEmpty()) {               // if stack is empty
                head = newNode;
                return;
            }

            newNode.next = head;           // link new node to old top
            head = newNode;                // make new node the top
        }

        // âœ… Pop operation â€” remove and return top element
        public static int pop() {
            if (isEmpty()) {               // underflow check
                System.out.println("Stack Underflow");
                return -1;
            }

            int top = head.data;           // get top data
            head = head.next;              // move head down
            return top;                    // return popped value
        }

        // âœ… Peek operation â€” return top element without removing
        public static int peek() {
            if (isEmpty()) {               // empty stack check
                System.out.println("Stack is Empty");
                return -1;
            }

            return head.data;              // return top element
        }
    }

    // ðŸ”¹ Main function to test stack operations
    public static void main(String[] args) {
        Stack s = new Stack();

        // Push elements
        s.push(1);
        s.push(2);
        s.push(3);
        s.push(4);
        s.push(5);

        // Pop and print all elements (LIFO order)
        while (!s.isEmpty()) {
            System.out.println(s.peek());
            s.pop();
        }
    }
}

/*
ðŸ“Œ Dry Run:
Push sequence: 1 â†’ 2 â†’ 3 â†’ 4 â†’ 5
Stack (top â†’ bottom): 5, 4, 3, 2, 1

Pop sequence:
â†’ Peek = 5 â†’ Pop 5
â†’ Peek = 4 â†’ Pop 4
â†’ Peek = 3 â†’ Pop 3
â†’ Peek = 2 â†’ Pop 2
â†’ Peek = 1 â†’ Pop 1

Output:
5
4
3
2
1

---

ðŸ“Š Time Complexity:
push()  â†’ O(1)
pop()   â†’ O(1)
peek()  â†’ O(1)
isEmpty() â†’ O(1)

ðŸ“Š Space Complexity:
O(n) â†’ for n nodes in the linked list

âœ… Advantage:
- No fixed size (dynamic memory allocation)
- No overflow unless memory is full
*/
