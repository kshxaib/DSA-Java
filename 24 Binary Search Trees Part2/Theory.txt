Topic: AVL Tree Rotations

Goal:
- Maintain balance in an AVL Tree after insertion or deletion.
- AVL Tree property: For every node, 
      |height(left subtree) - height(right subtree)| ≤ 1

If this property is violated, we perform **rotations** to rebalance the tree.

-------------------------------------------
TYPES OF ROTATION CASES
-------------------------------------------

There are 4 imbalance cases in an AVL Tree:

1. **LL Case (Left-Left Imbalance)**
2. **LR Case (Left-Right Imbalance)**
3. **RR Case (Right-Right Imbalance)**
4. **RL Case (Right-Left Imbalance)**


-------------------------------------------
1. LL Case (Left-Left Imbalance)
-------------------------------------------

Cause:
- A node is inserted in the **left subtree of the left child**.
- The tree becomes **left-heavy**.

Example:
        z
       /
      y
     /
    x

Balance condition violated at node `z`.

Fix:
- Perform a **Right Rotation (single rotation)** on `z`.

Steps:
1. Make `y` the new root of this subtree.
2. Move `z` to the right of `y`.
3. Move `y's right subtree` to `z's left`.

Diagram:
Before Rotation:
        z
       /
      y
     /
    x

After Right Rotation:
        y
       / \
      x   z


-------------------------------------------
2. LR Case (Left-Right Imbalance)
-------------------------------------------

Cause:
- A node is inserted in the **right subtree of the left child**.
- This causes a zig-zag pattern (left → right).

Example:
        z
       /
      y
       \
        x

Fix:
- Perform **two rotations**:
  1. **Left Rotation** on `y` (inner imbalance fix)
  2. **Right Rotation** on `z` (outer imbalance fix)

Steps:
1. Left Rotate at `y` → makes `x` the new child of `z`.
2. Right Rotate at `z`.

Diagram:
Before Rotation:
        z
       /
      y
       \
        x

After Rotations:
        x
       / \
      y   z


-------------------------------------------
3. RR Case (Right-Right Imbalance)
-------------------------------------------

Cause:
- A node is inserted in the **right subtree of the right child**.
- The tree becomes **right-heavy**.

Example:
      z
       \
        y
         \
          x

Fix:
- Perform a **Left Rotation (single rotation)** on `z`.

Steps:
1. Make `y` the new root of this subtree.
2. Move `z` to the left of `y`.
3. Move `y's left subtree` to `z's right`.

Diagram:
Before Rotation:
      z
       \
        y
         \
          x

After Left Rotation:
        y
       / \
      z   x


-------------------------------------------
4. RL Case (Right-Left Imbalance)
-------------------------------------------

Cause:
- A node is inserted in the **left subtree of the right child**.
- This creates a zig-zag pattern (right → left).

Example:
      z
       \
        y
       /
      x

Fix:
- Perform **two rotations**:
  1. **Right Rotation** on `y` (inner imbalance fix)
  2. **Left Rotation** on `z` (outer imbalance fix)

Steps:
1. Right Rotate at `y` → makes `x` the new child of `z`.
2. Left Rotate at `z`.

Diagram:
Before Rotation:
      z
       \
        y
       /
      x

After Rotations:
        x
       / \
      z   y

-------------------------------------------
SUMMARY TABLE
-------------------------------------------

| Case | Imbalance Direction | Fix Rotation(s)          |
|------|----------------------|--------------------------|
| LL   | Left-Left            | Right Rotation           |
| LR   | Left-Right           | Left then Right Rotation |
| RR   | Right-Right          | Left Rotation            |
| RL   | Right-Left           | Right then Left Rotation |

-------------------------------------------
TIME COMPLEXITY
-------------------------------------------

- Each rotation takes **O(1)** time.
- Rebalancing after insertion or deletion → **O(log n)** overall.

-------------------------------------------
KEY POINTS TO REMEMBER
-------------------------------------------
1. LL → Right Rotation
2. LR → Left + Right Rotation
3. RR → Left Rotation
4. RL → Right + Left Rotation
5. Always check balance factor after each insertion/deletion.
-------------------------------------------
